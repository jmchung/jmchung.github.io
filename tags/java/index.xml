<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on </title>
    <link>https://jmchung.github.io/tags/java/</link>
    <description>Recent content in Java on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 30 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://jmchung.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Map-Reduce with MongoDB and Morphia</title>
      <link>https://jmchung.github.io/post/map-reduce-with-mongodb-and-morphia/</link>
      <pubDate>Mon, 30 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jmchung.github.io/post/map-reduce-with-mongodb-and-morphia/</guid>
      <description>Just a note to record the usage of Map-Reduce with MongoDB and Morphia. Firstly, add the Morphia dependency.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mongodb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mongo-java-driver&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.11.2&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mongodb.morphia&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;morphia&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;0.105&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;  The syntax of MapReduceCommand in Morphia as shown in MapReduceCommand.java:
public MapReduceCommand( DBCollection inputCollection, String map, String reduce, String outputCollection, OutputType type, DBObject query) { // Compiled Code }  Here we want to group the sales amount (i.e., subtotal) of each county and exclude the null-subtotal from collection.</description>
    </item>
    
    <item>
      <title>Using the MongoDB Aggregation Framework via MongoDB Asynchronous Java Driver</title>
      <link>https://jmchung.github.io/post/using-the-mongodb-aggregation-framework-via-mongodb-asynchronous-java-driver/</link>
      <pubDate>Sat, 28 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jmchung.github.io/post/using-the-mongodb-aggregation-framework-via-mongodb-asynchronous-java-driver/</guid>
      <description>Introduction I often use Morphia in projects for mapping Java objects to/from MongoDB and it&amp;rsquo;s Query API instead of building the complex DBObject query. However, the current version (v. 0.105) without aggregate command support. Fortunately, the MongoDB Asynchronous Java Driver provides the aggregate builder to construct complex pipelines of operators in fluent way. As usual, the following paragraphs will express some basic usages of mongodb-async-driver in aggregation pipeline framework through an example.</description>
    </item>
    
    <item>
      <title>How to solve jsoup does not get complete HTML document</title>
      <link>https://jmchung.github.io/post/how-to-solve-jsoup-does-not-get-complete-html-document/</link>
      <pubDate>Fri, 25 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jmchung.github.io/post/how-to-solve-jsoup-does-not-get-complete-html-document/</guid>
      <description>jsoup: Java HTML Parser.
 Where crawling web pages by using jsoup, it only returns parts of HTML content if the document size is too large, e.g., the below example transferred over 6MB content. According to the jsoup&amp;rsquo;s API Reference the default maximum is 1MB. So that we can set jsoup connection with maxBodySize to zero to get rid of this limitation and may accompany with sufficient timeout property.</description>
    </item>
    
    <item>
      <title>Using MongoDB with Morphia</title>
      <link>https://jmchung.github.io/post/using-mongodb-with-morphia/</link>
      <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jmchung.github.io/post/using-mongodb-with-morphia/</guid>
      <description>Morphia - The JVM Object Document Mapper for MongoDB.
 MongoDB is an extremely useful document-based database in NoSQL field. There are various drivers and client libraries in MongoDB Ecosystem and detailed manual to facilitate the developers to get into it shortly. In the beginning, we use MongoDB Java driver to manipulate CRUD operations on databases. Everything is running well but lots of BasicDBObject cause the code lack of readability and fluency.</description>
    </item>
    
    <item>
      <title>Jersey Test Framework with Maven</title>
      <link>https://jmchung.github.io/post/jersey-test-framework-with-maven/</link>
      <pubDate>Tue, 05 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://jmchung.github.io/post/jersey-test-framework-with-maven/</guid>
      <description>Introduction This memo records the issues while executing the unit-test with Jersey Test framework. We use the Jersey framework to implement the RESTful Web services and employ the Maven to manage the dependencies in project. First of all, we add the jersey-test-framework-grizzly2 dependency to enable the test framework in pom.xml; Second, we deploy the application using Jersey specific servlet in web.xml. Finally, we have the following java files within Maven Archetype – maven-archetype-webapp:</description>
    </item>
    
    <item>
      <title>A Jersey POJOMapping Example in Mapping Form Parameters</title>
      <link>https://jmchung.github.io/post/a-jersey-pojomapping-example-in-mapping-form-parameters/</link>
      <pubDate>Mon, 29 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>https://jmchung.github.io/post/a-jersey-pojomapping-example-in-mapping-form-parameters/</guid>
      <description>Jersey, RESTful Web Services in Java.
 In Java Servlet circumstance, we usually harvest the form parameters by using request.getParameter(“FORM_FIELD_NAME”) syntax. Now we can do it more elegant while enabling Jsersey’s POJOMapping features. The following example demonstrates the account registration scenario. Here we have a Account class, i.e., Account.java:
public class Account { private String email; @JsonProperty(&amp;quot;email&amp;quot;) public String getEmail() { return email; } public void setEmail(String email) { this.</description>
    </item>
    
  </channel>
</rss>